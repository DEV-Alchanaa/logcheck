#!/bin/sh

# $Id: logcheck.postinst,v 1.45 2006/02/23 22:03:03 maks-guest Exp $

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#
# quoting from the policy:
#     Any necessary prompting should almost always be confined to the
#     post-installation script, and should be protected with a conditional
#     so that unnecessary prompting doesn't happen if a package's
#     installation fails and the `postinst' is called with `abort-upgrade',
#     `abort-remove' or `abort-deconfigure'.

# Source debconf library.
. /usr/share/debconf/confmodule

case "$1" in
    configure)
	# Add logcheck user
	# check for logcheck user or bad version without home
	# touch cron job on updating accounts to fix #284788
	if ! getent passwd logcheck > /dev/null; then
	  adduser --quiet --system --no-create-home --group logcheck ||true
	  touch /etc/cron.d/logcheck || true
    	elif dpkg --compare-versions "$2" eq 1.2.19; then
	   usermod -d /var/lib/logcheck logcheck > /dev/null || true
	fi
	# check for logcheck in adm group
	if ! getent group adm | grep logcheck > /dev/null; then
	  adduser --quiet logcheck adm || true
	fi  

	# add logcheck to /etc/aliases
	if [ -f /etc/aliases ] || [ -L /etc/aliases ]; then
	    if ! grep -qi "^logcheck" /etc/aliases; then
		echo "logcheck: root" >> /etc/aliases
		newaliases=`which newaliases`
		if [ $newaliases ] && [ -x $newaliases ]; then
		    newaliases || true
		fi
	    fi
	fi

	# Remove old directory on upgrade
	if [ -n "$2" ] && dpkg --compare-versions "$2" lt "1.1.1-13.2"; then
	    if [ -d /var/cache/logcheck ]; then
		rm -fr /var/cache/logcheck
	    fi
	fi
	# Remove unused old directory on upgrade
	if [ -n "$2" ] && dpkg --compare-versions "$2" lt "1.2.25"; then
	    if [ -d /var/state/logcheck ]; then
		rm -fr /var/state/logcheck
	    fi
	fi
	# Add logcheck mail header on install
        if [ ! -n "$2" ] && [ ! -f /etc/logcheck/header.txt ]; then
          cp -p /usr/share/logcheck/header.txt /etc/logcheck
        fi

	# Fix permissions for lock on install or upgrade
	if [ ! -n "$2" ] || dpkg --compare-versions "$2" lt "1.2.39"; then
          chown -R logcheck:logcheck /var/lock/logcheck || true
	  chmod 775 /var/lock/logcheck || true
        fi

	# need to be done on install and on upgrade for new rule files
	# (Can't do this; breaks policy! -todd)
	# TODO: Get logcheck user in Debian base.
	# chgrp -R logcheck /etc/logcheck || true

	# This gets executed even if there is no $2.
	#if dpkg --compare-versions "$2" lt "1.2.34"; then

	# Unconditionalizing this for now as we have files that are
	# unreadable upon upgrade.  <ttroxell@debian.org>
	chgrp -R logcheck /etc/logcheck || true

    	# Set Permissions on install or upgrade
	if [ ! -n "$2" ] || dpkg --compare-versions "$2" lt "1.2.34"; then
    	  chown -R logcheck:logcheck /var/lib/logcheck  || true
          chmod 2750 /etc/logcheck/ignore.d.paranoid || true
          chmod 2750 /etc/logcheck/ignore.d.workstation || true
          chmod 2750 /etc/logcheck/ignore.d.server || true
          chmod 2750 /etc/logcheck/cracking.d || true
          chmod 2750 /etc/logcheck/cracking.ignore.d || true
          chmod 2750 /etc/logcheck/violations.d || true
          chmod 2750 /etc/logcheck/violations.ignore.d || true
    	  chmod -R g+rX /etc/logcheck || true
          # just in case
          chown logcheck /var/lock/logcheck > /dev/null || true
	fi

	;;
    
    abort-upgrade|abort-remove|abort-deconfigure)
	
	;;
    
    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
	;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
