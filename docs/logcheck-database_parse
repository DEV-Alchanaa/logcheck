#!/usr/bin/perl -w
#-*-perl-*-

# --------------------------------------------------------------------------
#
#   Author : Michel Verdier <mverdier@thalix.com>
#	Copyright © 2004 THALIX
#
#	This program is free software; you can redistribute it and/or
#	modify it under the terms of the GNU General Public License
#	as published by the Free Software Foundation; either version 2
#	of the License, or (at your option) any later version.

#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.

#	You should have received a copy of the GNU General Public License
#	along with this program; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place - Suite 330,
#	Boston, MA  02111-1307, USA.
#
# --------------------------------------------------------------------------
#
# deduplicate et sort logcheck-database rules
#
# --------------------------------------------------------------------------

use strict;
use File::Basename;

my $logcheck_config = "/etc/logcheck";
my %lines;
my $check_dups = 1;
my $debug = 0;

# --------------------------------------------------------------------------
# sort lines and skip duplicates
# check if line is already in another file in the same directory
# --------------------------------------------------------------------------
sub clean_file {
    my $file = shift();
    print "clean_file $file\n" if($debug>1);

    open(IN,"<$file") || die "open $file : $!\n";
    my @lines = <IN>;
    close(IN);

    my $previous = '';
    open(OUT,">$file.new") || die "open $file.new : $!\n";
    foreach my $line (sort @lines) {
		if ($line eq $previous) {
			warn "skipping duplicate: $line" if($debug>1);
		} else {
			if ($check_dups) {
				my $dir = dirname($file);
				if (defined($lines{$dir}{$line})) {
					warn "duplicate: $line";
					warn "  in file $lines{$dir}{$line}\n";
					warn "  in file $file\n";
				}
				$lines{$dir}{$line} = $file;
			}
			print OUT $line;
		}
		$previous = $line;
    }
    close(OUT);

    if (-f "$file.new") {
		unlink("$file") if(-f "$file");
        rename("$file.new","$file");
    }
}

# --------------------------------------------------------------------------
# add .dpkg-dist file into original file
# --------------------------------------------------------------------------
sub join_files {
    my $file1 = shift();
    my $file2 = shift();
    print "join_files $file1>>$file2\n" if($debug>1);

    if (-f $file2) {
		open(IN,"<$file1") || die "open $file1 : $!\n";
		open(OUT,">>$file2") || die "open $file2 : $!\n";
		while (defined(my $line = <IN>)) {
			print OUT $line;
		}
		close(OUT);
		close(IN);
    } else {
        rename("$file1","$file2");
        print "renaming $file1 -> $file2\n" if($debug>0);
    }

	unlink("$file1") if(-f "$file1");
}

# --------------------------------------------------------------------------
# parse all files in directory
# --------------------------------------------------------------------------
sub parse_dir {
    my $dir = shift();
    print "parse_dir $dir\n" if($debug>0);

    opendir(DIR,$dir) || die "open $dir: $!\n";
    my @files = readdir(DIR);
    closedir(DIR);

    foreach my $file (@files) {
		next if($file !~ /.dpkg-dist$/);
		my $original = $file;
		$original =~ s/.dpkg-dist$//;
		join_files("$dir/$file","$dir/$original");
    }

    foreach my $file (@files) {
		next if($file =~ /^\.\.?$/);
		next if($file =~ /.dpkg-dist$/);
		next if($file =~ /^(logcheck.conf|logcheck.ignore|logcheck.logfiles)$/);
		if (-d "$dir/$file") {
			parse_dir("$dir/$file");
		} elsif (-f "$dir/$file") {
			clean_file("$dir/$file");
		} else {
			warn "unknown file type: $dir/$file\n";
		}
    }
}

parse_dir($logcheck_config);

